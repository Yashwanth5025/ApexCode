// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  problems   Problem[]
  submissions Submission[]

  @@map("users")
}

model Problem {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  difficulty  String
  category    String
  acceptance  String   @default("0%")
  submissionCount String @default("0")
  likes       Int      @default(0)
  dislikes    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  isCustom    Boolean  @default(false)

  // Relations
  user        User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  examples    Example[]
  constraints Constraint[]
  testCases   TestCase[]
  submissions Submission[]

  @@map("problems")
}

model Example {
  id          Int      @id @default(autoincrement())
  input       String
  output      String
  explanation String
  problemId   Int
  createdAt   DateTime @default(now())

  // Relations
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@map("examples")
}

model Constraint {
  id        Int      @id @default(autoincrement())
  text      String
  problemId Int
  createdAt DateTime @default(now())

  // Relations
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@map("constraints")
}

model TestCase {
  id             Int      @id @default(autoincrement())
  input          String
  expectedOutput String
  problemId      Int
  createdAt      DateTime @default(now())

  // Relations
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@map("test_cases")
}

model Submission {
  id           Int      @id @default(autoincrement())
  code         String
  language     String
  status       String   @default("pending") // pending, running, completed, failed
  executionTime Int?
  memoryUsed   Int?
  passed       Boolean  @default(false)
  createdAt    DateTime @default(now())

  // Relations
  userId    String
  problemId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@map("submissions")
}
